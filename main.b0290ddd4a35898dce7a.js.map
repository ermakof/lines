{"version":3,"file":"main.b0290ddd4a35898dce7a.js","mappings":"8KAGA,MAH+B,eAACA,EAAD,uDAAgB,EAAhB,OAC7BC,OAAOC,KAAK,IAAIC,MAAMH,KAAQI,KAAKC,GAAMC,SAASD,MCUpD,MAXiBE,IACf,MAAMC,EAAM,IAAID,GAChB,IAAK,IAAIE,EAAID,EAAIE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAIC,GACfD,EAAIC,GAAKD,EAAIG,GACbH,EAAIG,GAAKI,EAEX,OAAOP,GCAT,MAR8BQ,GAA8BC,IAC1D,MAAMT,EAAMS,EAAYb,KAAI,IAAM,IAClC,IAAK,IAAIK,EAAI,EAAGA,EAAIO,EAAkBP,GAAQ,EAC5CD,EAAIS,EAAYR,IAAMG,KAAKC,MAAsB,EAAhBD,KAAKE,SAAe,GAEvD,OAAON,GCET,MALgCU,GAAyBD,IACvD,IAAID,EAAmBV,UAAWW,EAAYP,OAASQ,EAAe,KAAKC,UAAW,IACtF,OAAOC,EAAqBJ,EAArBI,CAAuCH,ICKhD,MAJwB,SAACjB,GAA2C,IAA7BkB,EAA6B,uDAAP,GAC3D,OAAOG,EAAAA,EAAAA,SAAQC,EAAuBJ,GAAcK,EAASC,EAAtDH,CAA8ErB,ICHhF,MAaMyB,EAA8B,CACzC,EAAK,CAAEC,QAAS,GAAIC,MAAO,EAAGC,SAAU,GACxC,EAAK,CAAEF,QAAS,GAAIC,MAAO,EAAGC,SAAU,GACxC,EAAK,CAAEF,QAAS,GAAIC,MAAO,EAAGC,SAAU,IAa1C,MAVgC,CAC9BC,UAlB6B,IAmB7BC,uBAAwB,EACxBC,cAAeC,EAAgBC,GAnBa,GAoB5CC,sBAAkBC,EAClBC,MAAO,EACPC,kBAAcF,EACdG,WAAW,GCzBb,MAAMC,EAAgBC,GACpBA,EAAMpC,KAAI,CAACqC,EAAMC,IAAUD,GAAc,EAAPC,IAAWC,QAAQC,GAAQA,GAAO,IAUtE,MALoB,CAACJ,EAAsBK,KACzC,MAAMjB,EAAWH,EAAoBoB,GAAOjB,SAC5C,OAAOP,EAAAA,EAAAA,UALiByB,EAKQlB,EALgBX,GAChDA,EAAY8B,MAAM,EAAGD,IAIsBvB,EAASgB,EAA7ClB,CAA2DmB,GAL1CM,IAAAA,GCY1B,MAb2BJ,GAAiBM,IAC1C,MAAMC,EAPe,EAACD,EAAgCN,IACtDM,GAAUA,EAAOL,QAAQhB,GAAUA,EAAMuB,QAAQR,IAAQ,IAAG,GAM9CS,CAAeH,EAAO,GAAIN,GAClCU,EALe,EAACJ,EAAgCN,IACtDM,GAAUA,EAAOL,QAAQhB,GAAUA,EAAMuB,QAAQR,IAAQ,IAAG,GAI9CW,CAAeL,EAAO,GAAIN,GAClClC,EAAM,GAOZ,OANIyC,GACFzC,EAAI8C,KAAKL,GAEPG,GACF5C,EAAI8C,KAAKF,GAEJ5C,GCVT,MAJqBoC,GACZA,EAAI,GHAkB,EGAbA,EAAI,GCAtB,MAQMW,EAAgB,CACpBC,EACAZ,EACAC,EACAL,EACAiB,KAEA,MAAMT,EAA+B,GAC/BU,EAAgB,CACpB,EAAG,GACH,EAAG,GACH,EAAG,IAECC,EAAclC,EAAoBoB,GAAOlB,MAC/C,IAAK,IAAIlB,EAAI,EAAGA,EJtBa,EIsBQA,GAAQ,EAAG,CAC9C,MACMmD,EAASC,EADgC,MAAdL,EAAoB,CAAC/C,EAAGmC,GAAO,CAACA,EAAKnC,IAEhEqD,EAAatB,EAAMoB,GACpBpB,EAAMoB,IAAWE,IAAeL,EAMnCC,EAAMD,GAASH,KAAKM,IALhBH,GAAWC,EAAMD,GAAS/C,OAASiD,GACrCX,EAAOM,KAAK,IAAII,EAAMD,KAExBC,EAAMD,GAAW,IAQrB,OAHIC,EAAMD,GAAS/C,OAASiD,GAC1BX,EAAOM,KAAK,IAAII,EAAMD,KAEjBT,GCjCT,MANqBN,IACnB,MAAMqB,EAAInD,KAAKoD,IAAIpD,KAAKqD,IAAIrD,KAAKsD,MAAMxB,EAAM,GLAhB,GKAwC,EAAG,GAAIT,GAE5E,MAAO,CADGrB,KAAKoD,IAAIpD,KAAKqD,IAAIvB,ELDC,EKCKqB,EAAqB,GAAI9B,GAChD8B,ICkBb,MAduB,CAACI,EAAoBtB,IAAmBL,IAC7D,MAAMI,EAAMwB,EAAYD,GAClBE,EARiB,EAACC,EAAezB,EAAeL,EAAsBiB,IAC5EF,EFDe,IECSe,EAAOzB,EAAOL,EAAOiB,GAO7Bc,CAAiB3B,EAAI,GAAIC,EAAOL,EAAOA,EAAM2B,IACvDK,EANmB,EAACF,EAAezB,EAAeL,EAAsBiB,IAC9EF,EFHiB,IEGSe,EAAOzB,EAAOL,EAAOiB,GAK/BgB,CAAmB7B,EAAI,GAAIC,EAAOL,EAAOA,EAAM2B,IACzD3D,EAAM,GAOZ,OANI6D,EAAQ3D,QACVF,EAAI8C,KAAKe,GAEPG,EAAQ9D,QACVF,EAAI8C,KAAKkB,GAEJhE,GCXT,MAJ0B,CAACkC,EAAaG,EAAeL,KAC9CnB,EAAAA,EAAAA,SAAQqD,EAAkBhC,GAAMiC,EAAejC,EAAKG,GAApDxB,CAA4DmB,GCGrE,MATe,IACN,UAAG,KAAO,KAAV,QAAiB,KAAjB,QAAwB,KAAxB,QAA+B,MAAOoC,QAAQ,UAAWC,IAE3DA,EACAC,OAAOC,gBAAgB,IAAIC,WAAW,IAAI,GAAM,IAAQH,EAAe,GACxEI,SAAS,MCLf,WAAgBvC,GAAD,IAA0BwC,EAA1B,uDAAoD,EAApD,OACb,WAAuC,IAAtC1C,EAAsC,uDAAP,GAC9B,MAAMhC,EAAM,IAAIgC,GAIhB,OAHW,MAAPE,GAAeA,GAAO,GAAKA,EAAMF,EAAM9B,SACzCF,EAAIkC,GAAOwC,GAEN1E,ICFX,GAAgBgC,EAA8BH,EAAuB8B,IAC/C,MAAhB9B,GAAsC,MAAd8B,EACnB3B,GAEFnB,EAAAA,EAAAA,SAAQ8D,EAAQhB,EAAY3B,EAAMH,IAAgB8C,EAAQ9C,EAAc,GAAxEhB,CAA4EmB,GCRrF,aAAe,IAAC4C,EAAD,uDAAgB,EAAhB,OAAsB,IAAIC,SAASC,GAAYC,WAAWD,EAASF,MCE3E,MAAMI,EAAoBxC,GAC/BA,EAAOyC,QAAO,CAACjF,EAAKmB,IACXA,EAAM8D,QAAO,CAACC,EAAkBC,KACrCD,EAAIC,GAAO,GACJD,IACNlF,IACF,ICNQoF,EAAuBpD,IAClC,MAAMN,EAAgC,GAItC,OAHAM,EAAMqD,SAASC,IACb5D,EAAiB4D,GAAM,MAElB5D,GCLI6D,EAAyB,CACpCC,EACA9D,KAEA,MAAMH,EAA+B,IAAIiE,GAIzC,OAHA/F,OAAOC,KAAKgC,GAAkB2D,SAASI,IACrClE,EAAcmE,OAAOD,IAAQrF,KAAKC,MAAsB,EAAhBD,KAAKE,SAAe,MAEvDiB,GC2CIoE,EAAM,CACjBC,EACAC,EACAC,KAEA,MAAMC,EAhDSC,CAAAA,IAIf,MAAMC,EAAOtG,MAAMuG,QAAQF,IAAQ5F,KAAK+F,KAAKH,EAAI9F,QACjD,IAAK+F,EACH,OAAO,KAMT,MAcMG,EAAoB,CAACC,EAAW9C,IAAc8C,GAAK,GAAKA,EAAIJ,GAAQ1C,GAAK,GAAKA,EAAI0C,EAQxF,MAAO,CACLA,KAAAA,EACAK,eALqB,CAACC,EAAmBC,IACzCJ,EAAkBI,EAAG,GAAIA,EAAG,KAAOJ,EAAkBG,EAAG,GAAIA,EAAG,IAK/DH,kBAAAA,EACAK,WA1BiB,KAEjB,MAAMC,EAA6B,GACnC,IAAK,IAAIzG,EAAI,EAAGA,EAAIgG,EAAMhG,GAAQ,EAAG,CACnC,MAAM0G,EAAQV,EAAOS,EAAKxG,OACpB0G,EAAMD,EAAQV,EACpBS,EAAK5D,KAAKkD,EAAIzD,MAAMoE,EAAOC,GAAKhH,KAAKO,GAAOA,GArBrC,GACC,KAsBV,OAAOuG,KA4BIG,CAAQjB,GACrB,IAAKG,GAAgB,MAARF,GAAsB,MAANC,EAC3B,OAAO,KAET,MAAMY,EAAOX,EAAKU,aACZK,EAAanH,MAAMuG,QAAQL,GAAQA,EAAK,GAAKjC,EAAYiC,GAAM,GAC/DkB,EAAapH,MAAMuG,QAAQL,GAAQA,EAAK,GAAKjC,EAAYiC,GAAM,GAC/DmB,EAAarH,MAAMuG,QAAQJ,GAAMA,EAAG,GAAKlC,EAAYkC,GAAI,GACzDmB,EAAatH,MAAMuG,QAAQJ,GAAMA,EAAG,GAAKlC,EAAYkC,GAAI,GACzDoB,EAAK,CAAC,EAAG,GAAI,EAAG,GAChBC,EAAK,CAAC,EAAG,EAAG,GAAI,GAEhBC,EAAKzH,MAAMoG,EAAKE,MAAQ,GACxBoB,EAAK1H,MAAMoG,EAAKE,MAAQ,GAC9B,IAAIqB,EACAC,EAGJ,IAAKxB,EAAKO,eAAe,CAACQ,EAAIC,GAAK,CAACC,EAAIC,IACtC,OAAO,KAIT,IA1EW,IA0EPP,EAAKM,GAAIC,GACX,OAAO,KAIT,IAAIO,EAAY,EAChBd,EAAKI,GAAIC,GAAM,EACf,EAAG,CACDQ,GAAO,EACP,IAAK,IAAIlB,EAAI,EAAGA,EAAIN,EAAKE,KAAMI,GAAQ,EACrC,IAAK,IAAI9C,EAAI,EAAGA,EAAIwC,EAAKE,KAAM1C,GAAQ,EAErC,GAAImD,EAAKL,GAAG9C,KAAOiE,EAEjB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAQ,EAAG,CAChC,MAAMC,EAAKrB,EAAIa,EAAGO,GACZE,EAAKpE,EAAI4D,EAAGM,GACd1B,EAAKK,kBAAkBsB,EAAIC,KA1F7B,IA0FoCjB,EAAKgB,GAAIC,KAC7CJ,GAAO,EACPb,EAAKgB,GAAIC,GAAMH,EAAI,GAM7BA,GAAQ,SACAD,IAnGE,IAmGMb,EAAKM,GAAIC,IAE3B,IArGY,IAqGRP,EAAKM,GAAIC,GACX,OAAO,KAITK,EAAMZ,EAAKM,GAAIC,GACf,IAAIZ,EAAIW,EACJzD,EAAI0D,EAER,IADAO,EAAIF,EACGE,EAAI,GAAG,CACZJ,EAAGI,GAAKnB,EACRgB,EAAGG,GAAKjE,EACRiE,IACA,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,MAAME,EAAKpE,EAAI4D,EAAGM,GACZC,EAAKrB,EAAIa,EAAGO,GAClB,GAAI1B,EAAKK,kBAAkBsB,EAAIC,IAAOjB,EAAKgB,GAAIC,IAAOH,EAAG,CACvDnB,GAAQa,EAAGO,GACXlE,GAAQ4D,EAAGM,GACX,QAON,OAHAL,EAAG,GAAKN,EACRO,EAAG,GAAKN,EAEDK,EAAGnC,QAAO,CAAC2C,EAAOC,EAAM3F,KAC7B0F,EAAM9E,KAAK,CAACuE,EAAGnF,GAAM2F,IACdD,IACN,K,urBCjIL,MAAME,GAAWC,EAAAA,EAAAA,IAAY,CAC3BC,KAAM,MACNC,aAAcA,EACdC,SAAU,CACRC,UAAYC,GAAUA,EACtBC,YAAa,CAACD,EAAOE,IAAWA,EAAOC,QACvCC,aAAc,CAACJ,EAAD,KAA+C,IAAvC,QAAEG,GAAqC,EAC3DH,EAAM/G,UAAYkH,EAClBH,EAAMvG,kBAAeF,EACrByG,EAAM1G,sBAAmBC,EACzByG,EAAMxG,MAAQ,EACdwG,EAAM9G,uBAAyBL,EAAoBsH,GAASrH,QAC5DkH,EAAM7G,cAAgBC,EAAgBC,GAAsB2G,EAAM9G,yBAEpEmH,gBAAiB,CAACL,EAAD,KAA2D,IAAnD,QAAEG,GAAiD,EAC1EH,EAAMvG,aAAe0G,GAEvBG,eAAgB,CAACN,EAAD,SAAQ,QAAEG,GAAV,SAA+CH,GAC/DO,WAAY,CAACP,EAAOE,IAAR,OAAyBF,GAAUE,EAAOC,SACtDK,QAAUR,IACRA,EAAM9G,uBhBvBkC,EgBwBxC8G,EAAM7G,cAAgBC,EAAgBC,GAAsB,IAE9DoH,SAAWT,IACT,MAAM9G,EAAmD,GAA1BoE,OAAO0C,EAAM/G,WAC5C+G,EAAMvG,kBAAeF,EACrByG,EAAM1G,sBAAmBC,EACzByG,EAAMxG,MAAQ,EACdwG,EAAM9G,uBAAyBA,EAC/B8G,EAAM7G,cAAgBC,EAAgBC,GAAsBH,IAE9DwH,OAASV,IACPA,EAAMtG,WAAY,GAEpBiH,QAAUX,IACRA,EAAMtG,WAAY,OAKlB,QAAEkH,EAAF,QAAWC,GAAYnB,EC1CvBG,EAA2B,CAC/BiB,iBAAavH,GAGTwH,GAAYpB,EAAAA,EAAAA,IAAY,CAC5BC,KAAM,OACNC,aAF4B,EAG5BC,SAAU,CACRC,UAAYC,GAAUA,EACtBgB,QAAS,CAAChB,EAAD,SAAQ,QAAEG,GAAV,SAA8DH,GACvEiB,MAAO,CAACjB,EAAD,KAAiE,IAAzD,QAAEG,GAAuD,EACtEH,EAAMc,YAAcX,GAEtBe,OAASlB,IACPA,EAAMc,iBAAcvH,OAKlBqH,QAAF,EAAWC,QAAOA,GAAKE,ECtBhBI,EAAiC,CAAEC,IAAF,EAAOC,KAAIA,G,osBCIzD,MAAMC,EAAUC,GACP,IAAI9E,SAAQ,CAACC,EAAS8E,KAC3B7E,YAAW,KACT,IACE,IAAK4E,EACH,KAAM,6BAER,IAAIT,EAA4B,OAAKS,GAAR,IAAkBE,MAAOC,MACtDC,aAAaC,QAAQC,GAAwBC,KAAKC,UAAUjB,IAC5DpE,EAAQoE,GACR,MAAOkB,GACPR,EAAQQ,GAAkB,+BAE3B,QAIDC,EAAU,IACP,IAAIxF,SAASC,IAClBC,YAAW,KACTgF,aAAaO,WAAWL,IACxBnF,GAAQ,KACP,QCrBA,SAAUyF,EAAV,GAAyE,IAAlD,QAAEhC,GAAgD,QACxEiC,EAAAA,EAAAA,IAAIC,EAAAA,UACV,IAAIvB,QAAoBwB,EAAAA,EAAAA,IAAKhB,EAAQnB,GACjCW,UACIsB,EAAAA,EAAAA,IAAIG,EAAAA,MAAkBzB,UACtBsB,EAAAA,EAAAA,IAAIC,EAAAA,mBAEND,EAAAA,EAAAA,IAAIC,EAAAA,WAGL,SAAUG,UACTJ,EAAAA,EAAAA,IAAIC,EAAAA,gBACJC,EAAAA,EAAAA,IAAKL,SACLG,EAAAA,EAAAA,IAAIC,EAAAA,iBACJD,EAAAA,EAAAA,IAAIC,EAAAA,WAGL,SAAUI,IACf,MAAMC,QAAsBJ,EAAAA,EAAAA,IAAK,CAACX,aAAcA,aAAagB,SAAU,qBACvE,GAAID,EAAe,CACjB,MAAM5B,QAAoBwB,EAAAA,EAAAA,IAAK,CAACR,KAAMA,KAAKc,OAAQF,SAC7CN,EAAAA,EAAAA,IAAIG,EAAAA,MAAkBzB,KAIzB,SAAU+B,WACTC,EAAAA,EAAAA,IAAUP,EAAAA,QAAAA,KAA0BJ,SACpCW,EAAAA,EAAAA,IAAUP,EAAAA,OAAAA,KAAyBC,SACnCM,EAAAA,EAAAA,IAAUP,EAAAA,UAAAA,KAA4BE,GCtB9C,OAf6B,CAAC7I,EAAsBQ,KAClD,MAAMxC,EAAM,IAAIgC,GAWhB,OAVkBQ,EAAOtC,OAAS,GAEhCsC,EAAO6C,SACJlE,GACCA,GACAA,EAAMkE,SAASnD,IACblC,EAAIkC,GAAO,OAIZlC,G,6rBCeF,SAAU6K,WAKTL,EAAAA,EAAAA,IAAIC,EAAAA,UACV,MAAMU,QAAqBT,EAAAA,EAAAA,IAAK,CAACX,aAAcA,aAAagB,SAAUK,IACtE,GAAID,EAAc,CAChB,MAAME,QAAgBX,EAAAA,EAAAA,IAAK,CAACR,KAAMA,KAAKc,OAAQG,SACzCX,EAAAA,EAAAA,IAAIxB,EAAQX,YAAYgD,UAE1Bb,EAAAA,EAAAA,IAAIC,EAAAA,WAGL,MAAMa,GAAUlD,GAAsBA,EAAMoB,IAE5C,SAAU+B,KACf,MAAM/B,QAAYgC,EAAAA,EAAAA,IAAOF,UACnBZ,EAAAA,EAAAA,IAAK,CAACX,aAAcA,aAAaC,SAAUoB,GAAuBlB,KAAKC,UAAUX,IAOlF,SAAUiC,GACf9H,GAEmE,IADnE+H,EACmE,uDADvB,GAE5C,MAAQnK,cAAeiE,EAAjB,aAA2B3D,SAAuB2J,EAAAA,EAAAA,IAAOF,IAE/D,IAAI/J,QAAsBmJ,EAAAA,EAAAA,IAAKiB,EAAYnG,EAAU3D,EAAc8B,SAC7D6G,EAAAA,EAAAA,IAAIC,EAAAA,WAAA,IAAwBlJ,cAAAA,EAAeM,aAAc8B,GAAe+H,KAqBzE,SAAUE,GACfrF,EACAC,EACA5B,GAEA,MAAQrD,cAAeiE,SAAmBgG,EAAAA,EAAAA,IAAOF,IAC3CzF,EAAOH,aAAagF,EAAAA,EAAAA,IAAKrH,EAAakD,IACtCT,EAAKJ,aAAagF,EAAAA,EAAAA,IAAKrH,EAAamD,IACpCjF,QAAsBmJ,EAAAA,EAAAA,IAAKiB,EAAYnG,EAAUK,EAAMC,GACvDpE,EAAmB,CAAE,CAACoE,GAAK,UAC3B0E,EAAAA,EAAAA,IAAIC,EAAAA,WAAsB,CAAElJ,cAAAA,EAAeG,iBAAAA,WAC3CgJ,EAAAA,EAAAA,IAAKmB,EAAOjH,GA0Fb,SAAUkH,GAAV,GAEsF,IAFxD,QACnCvD,GAC2F,EAC3F,MAAQhH,cAAeiE,EAAjB,aAA2B3D,EAA3B,UAAyCR,SAAoBmK,EAAAA,EAAAA,IAAOF,IAC1E,GAAoB,MAAhBzJ,IAAyB2D,EAAS+C,GAAU,CAC9C,MAAMwD,QAAcrB,EAAAA,EAAAA,IAAK/E,EAAKH,EAAU3D,EAAc0G,GACtD,IAAIhH,EACJ,IAAKwK,EAEH,kBA5HC,UACLlK,EACA8B,EACAiB,SAEO6G,GAAS9H,EAAY,CAAEjC,iBAAkB,CAAE,CAACiC,GAAa,qBAC1D+G,EAAAA,EAAAA,IAAKmB,EAAOjH,SACX6G,GAAS5J,EAAc,CAAEH,sBAAkBC,IAoHvCqK,CAAMnK,EAAc0G,EAAS,YA3FnC,UACL5E,EACAoI,GAEmE,IADnEnH,EACmE,uDADpD,QAET4F,EAAAA,EAAAA,IAAIC,EAAAA,WAAsB,CAAE5I,kBAAcF,KAChD,IAAK,IAAI1B,EAAI,EAAGA,EAAI8L,EAAM7L,OAAQD,GAAQ,QACjC2L,GAAOG,EAAM9L,EAAI,GAAI8L,EAAM9L,GAAI,KAGxC,MAAMyB,EAAmB,CAAE,CAACiC,GAAa,UACnC6G,EAAAA,EAAAA,IAAIC,EAAAA,WAAsB,CAAE/I,iBAAAA,WAC5BgJ,EAAAA,EAAAA,IAAKmB,EAAOjH,GAkFPqH,CAAM1D,EAASwD,EAA0C,KAChExK,QAAsBmJ,EAAAA,EAAAA,IAAKiB,EAAYnG,EAAU3D,EAAc0G,GAEjE,MAAM2D,QAAuBxB,EAAAA,EAAAA,IAC3ByB,EACAzG,OAAO6C,GACPlH,EAAUoD,WACVlD,GAEE5B,MAAMuG,QAAQgG,IAAmBA,EAAehM,cApFjD,UACLsC,EACAoC,GAEA,MAAMlD,QAAyBgJ,EAAAA,EAAAA,IAAK1F,EAAkBxC,SAChDgI,EAAAA,EAAAA,IAAIC,EAAAA,WAAsB,CAAE/I,iBAAAA,WAC5BgJ,EAAAA,EAAAA,IAAKmB,EAAOjH,GA+EPwH,CAAMF,EAAgB,WAxE5B,UACL1J,GAEA,MAAMgH,QAAYgC,EAAAA,EAAAA,IAAOF,KAEvB/J,cAAeiE,EACf5D,MAAOyK,EAFH,iBAGJ3K,GACE8H,EAEEjI,QAAsBmJ,EAAAA,EAAAA,IAAK4B,GAAsB9G,EAAUhD,GAC3DZ,EACJyK,GACC3K,EAAmBjC,OAAOC,KAAKgC,GAA4CxB,OAAS,SACjFsK,EAAAA,EAAAA,IACJC,EAAAA,WAAsB,CACpBlJ,cAAAA,EACAG,sBAAkBC,EAClBC,MAAAA,KAuDO2K,CAAML,WA9CZ,UACLtH,GAEA,MAAQrD,cAAeiE,EAAjB,UAA2BnE,SAAoBmK,EAAAA,EAAAA,IAAOF,IAEtDkB,QAAiB9B,EAAAA,EAAAA,IAAK+B,EAAajH,EAAUnE,GAC7CK,QAAyBgJ,EAAAA,EAAAA,IAAKtF,EAAqBoH,GACnDjL,QAAsBmJ,EAAAA,EAAAA,IAC1BnF,EACAC,EACA9D,SAEI8I,EAAAA,EAAAA,IAAIC,EAAAA,WAAsB,CAAElJ,cAAAA,EAAeG,iBAAAA,WAC3CgJ,EAAAA,EAAAA,IAAKmB,EAAOjH,GAmCP8H,CAAM,WA5BZ,kBACClC,EAAAA,EAAAA,IAAIC,EAAAA,WAAsB,CAAE/I,sBAAkBC,KA4BzCgL,UAEFpB,MAIJ,SAAUqB,WACT1B,EAAAA,EAAAA,IAAUlC,EAAQb,UAAU0E,KAAMhC,UAClCK,EAAAA,EAAAA,IAAUlC,EAAQR,aAAaqE,KAAMtB,UACrCL,EAAAA,EAAAA,IAAUlC,EAAQN,eAAemE,KAAMf,UACvCZ,EAAAA,EAAAA,IAAUlC,EAAQH,SAASgE,KAAMtB,IChNlC,MAAMH,GAAwB,YACxBnB,GAAyB,oBAEhC6C,IAAiBC,EAAAA,EAAAA,MAEjBC,IAAQC,EAAAA,EAAAA,IAAe,CAC3BhE,QAASM,EACT2D,WAAaC,GACXA,IACGC,UAIAC,OAAOP,IACPO,OAAOC,OAGdR,GAAeS,KCrBR,kBACCC,EAAAA,EAAAA,IAAI,CAACvC,KAAY2B,UCDvBI,GAAMS,SAASzE,EAAAA,a,uCCMjB,GARc0E,GAAAA,EAAAA,IAAH,K,GAAA,qH,qBAAA,G,uyBCMX,MAAMC,GAAOD,GAAAA,EAAAA,IAAH,Q,gHAAG,iNA8Eb,I,GAAA,GAhDqB,KACnB,MAAMD,GAAWG,EAAAA,EAAAA,OACX,QAAExE,GAAYJ,GAEbW,EAAUkE,IAAeC,EAAAA,EAAAA,UAAoB,CAAEzE,MAAO,GAAI0E,SAAU,KAMrEC,EAAgBC,IACpB,MAAM,GAAE3I,EAAF,MAAMZ,GAAUuJ,EAAEC,cACxBL,EAAY,SAAKlE,GAAN,IAAgB,CAACrE,GAAKZ,MAGnC,OACE,gBAACiJ,GAAD,CAAMQ,KAAK,YACT,gBAAC,MAAD,CAAQC,cAAa,MAAOzE,GAAY0E,SAXvB,KACnBZ,EAASrE,EAAQO,MAWb,gBAAC,MAAD,KACE,yBAAO2E,QAAQ,SAAf,OACA,gBAAC,MAAD,CACEH,KAAK,QACL7I,GAAG,QACH0C,KAAK,QACLuG,YAAY,gBACZ7J,MAAOiF,EAASN,MAChBmF,SAAUR,IAGZ,yBAAOM,QAAQ,YAAf,UACA,gBAAC,MAAD,CACEH,KAAK,WACL7I,GAAG,WACH0C,KAAK,WACLuG,YAAY,iBACZ7J,MAAOiF,EAASoE,SAChBS,SAAUR,IAGZ,0BAAQG,KAAK,cAAcM,UAAW9E,EAASN,QAAUM,EAASoE,SAAUlB,KAAK,UAAjF,aCzEV,MAAMc,GAAOD,GAAAA,EAAAA,OAAH,Q,gHAAG,kDAkBb,I,GAAA,GAR4B,IAAoD,IAAnD,MAAEgB,EAAQ,SAAV,QAAoBC,EAApB,KAA6BR,EAAO,UAAe,EAC9E,OACE,gBAAC,GAAD,CAAMA,KAAMA,EAAMQ,QAASA,GACxBD,ICbP,MAAME,GAAY,CAChB,CAAEtJ,GAAI,IAAK0C,KAAM,WACjB,CAAE1C,GAAI,IAAK0C,KAAM,UACjB,CACE1C,GAAI,IACJ0C,KAAM,qBAIJ2F,GAAOD,GAAAA,EAAAA,IAAH,Q,gHAAG,2HAgCb,OAf4B,IAAiC,IAAhC,SAAEmB,EAAF,cAAYC,GAAoB,EAC3D,OACE,gBAAC,GAAD,KACE,oCACA,0BAAQpK,MAAOoK,EAAeX,KAAK,SAASnG,KAAK,SAASwG,SAAUK,GACjED,GAAUhP,KAAKyC,GACd,0BAAQ0M,IAAK1M,EAAMiD,GAAI6I,KAAK,SAASzJ,MAAOrC,EAAMiD,IAC/CjD,EAAM2F,WC1BnB,MAAMgH,GAAe,KACnB,MAAM,UAAE3N,IAAc4N,EAAAA,EAAAA,KAAY,QAAC,IAAEzF,GAAH,SAAyBA,KACrDiE,GAAWG,EAAAA,EAAAA,OAEjBsB,EAAAA,EAAAA,YAAU,KACRzB,EAAShD,EAAAA,eACR,IAeH,OACE,gBAAC,GAAD,CAAO0D,KAAK,YACV,gBAAC,GAAD,CAAQA,KAAK,cAAcQ,QAfX,KAClBlB,EAAShD,EAAAA,aAc0CiE,MAAM,UACvD,gBAAC,GAAD,CAAQG,SAZeM,IACzB,MAAM,MAAEzK,GAAUyK,EAAMjB,cACxBT,EAAShD,EAAAA,aAAwB/F,KAUMoK,cAAezN,IACpD,gBAAC,GAAD,CAAQ8M,KAAK,eAAeQ,QARX,KACnBlB,EAAS9C,EAAAA,WAO4C+D,MAAM,YAK/D,I,GAAA,IAAeU,EAAAA,EAAAA,MAAKJ,ICtCpB,MAAMK,GAAQ3B,GAAAA,EAAAA,EAAH,Q,gHAAG,4EAiBd,I,SAAA,GARoC,IAAoB,IAAnB,MAAErE,EAAQ,IAAS,EACtD,OAAKA,EAIE,gBAACgG,GAAD,sBAAkBhG,IAHhB,gBAACgG,GAAD,e,6HCPX,MAAMC,GAAa5B,GAAAA,EAAAA,IAAH,QAAG,2KAYb6B,IAASC,EAAAA,GAAAA,IAAH,iHAUN7B,IAAOD,EAAAA,GAAAA,GAAO4B,GAAP5B,CAAH,+eAiBS6B,IAMbE,GAAU,KACd,MAAOC,EAASC,IAAc7B,EAAAA,EAAAA,UAA6B,MAM3D,OALAoB,EAAAA,EAAAA,YAAU,KACR,MAAMQ,EAAUE,SAASC,eAAe,WACxCF,EAAWD,KACV,IAGDA,IACAI,EAAAA,EAAAA,cACE,gBAAC,GAAD,CAAM3B,KAAK,WACT,+BACE,4BACA,4BACA,4BACA,8BAGJuB,IAKN,I,GAAA,IAAeN,EAAAA,EAAAA,MAAKK,IClEpB,MAAM9B,GAAOD,GAAAA,EAAAA,IAAH,Q,gHAAG,6BA0Bb,OAnBoC,IAAoB,IAAnB,MAAErE,EAAQ,IAAS,EACtD,MAAM,UAAEvH,IAAcmN,EAAAA,EAAAA,KAAY,QAAC,IAAEzF,GAAH,SAAyBA,KAC3D,IAAIuG,GAAWC,EAAAA,GAAAA,MAQf,OANAd,EAAAA,EAAAA,YAAU,KACJ7F,GACF0G,EAAS,IAAK,CAAE3L,SAAS,MAE1B,CAACiF,IAGF,gBAAC,GAAD,KACE,gBAAC,GAAD,CAAYA,MAAOA,IACnB,gBAAC,MAAD,MACCvH,GAAa,gBAAC,GAAD,QCbpB,OAVsC,IAAyB,IAAxB,SAAEmO,EAAF,MAAY5G,GAAY,EACzD6G,GAAWC,EAAAA,GAAAA,MAEf,OAAK9G,EAIE4G,EAHE,gBAAC,MAAD,CAAUnK,GAAG,QAAQsC,MAAO,CAAEvC,KAAMqK,GAAY9L,SAAO,KCqBlE,OAtBkB,KAChB,MAAM,YAAE8E,IAAgB+F,EAAAA,EAAAA,KAAY,QAAC,KAAExF,GAAH,SAA0BA,KAE9D,OACE,gBAAC,MAAD,KACE,gBAAC,MAAD,KACE,gBAAC,MAAD,CAAO2G,QAAS,gBAAC,GAAD,CAAY/G,MAAOH,MAAAA,OAAF,EAAEA,EAAaG,SAC9C,gBAAC,MAAD,CAAOgH,KAAK,QAAQD,QAAS,gBAAC,GAAD,QAC7B,gBAAC,MAAD,CACEC,KAAK,IACLD,QACE,gBAAC,GAAD,CAAa/G,MAAOH,MAAAA,OAAF,EAAEA,EAAaG,OAC/B,gBAAC,GAAD,aClBhB,MAAMiH,GAAgB,IACpB,gBAAC,GAAD,CAAOnC,KAAK,YACV,gBAAC,GAAD,OAIJ,I,MAAA,IAAeiB,EAAAA,EAAAA,MAAKkB,I,mHCApB,MAAM3C,GAAOD,GAAAA,EAAAA,IAAH,QAAG,8BACA,QAAC,OAAE6C,GAAH,SAAiBA,EAAS,EAAI,MAGrCC,GAAU9C,GAAAA,EAAAA,EAAH,QAAG,mCAIV+C,GAAgB,KACpB,MAAM,cAAElP,EAAF,MAAiBK,EAAQ,IAAMqN,EAAAA,EAAAA,KAAY,QAAC,IAAEzF,GAAH,SAAyBA,KACpEkH,GAAezB,EAAAA,EAAAA,KAAY,QAAC,KAAExF,GAAH,UAA4BA,EAAKP,eAQlE,OACE,gBAAC,GAAD,CAAMqH,OAAQG,GACZ,gBAAC,GAAD,CAAOvC,KAAK,eACV,gBAACqC,GAAD,CAASrC,KAAK,iBAAd,qBAA6CvM,IAC7C,gBAAC4O,GAAD,CAASrC,KAAK,wBAAd,+BATgB5M,EAAcY,QAAQuC,KAAoBA,IAAOxE,OACpDqB,EAAcrB,OACI,KAAKS,QAAQ,QAapD,QAAeyO,EAAAA,EAAAA,MAAKqB,I,gIC7BpB,MAAME,IAASnB,EAAAA,GAAAA,IAAH,QAAG,oQAkBToB,GAAqB,CACzB,EAAG,UACH,EAAG,UACH,EAAG,WAECC,GAAW,SAACvL,GAAD,IAAawL,EAAb,uDAAuB,GAAvB,gBAAyCF,GAAMtL,IAA/C,OAAqDwL,GAAoB,KAOpFC,GAAYrD,GAAAA,EAAAA,IAAH,QAAG,ucAEP,QAAC,QAAEsD,GAAH,SCzCc,IDyCgBA,EAAU,EAAI,MAC3C,QAAC,SAAEC,GAAH,SC1Ca,ID0CkBA,EAAW,EAAI,MAIxC,QAAC,QAAED,GAAH,4BAA8BA,EAAU,OAAS,GAAjD,QACC,QAAC,SAAEC,GAAH,4BAA+BA,EAAW,OAAS,GAAnD,QAEf,QAAC,OAAEC,GAAH,SAAiBA,EAAS,eAAiB,MAezCC,GAAUzD,GAAAA,EAAAA,IAAH,QAAG,sRAIA,QAAC,SAAE0D,EAAF,YAAYC,EAAZ,OAAyBC,GAA1B,SACZD,IAA4BD,EAAWP,GAASS,GAAUT,GAASS,EAAQ,UAM7D,QAAC,SAAEF,GAAH,SAAmBA,EAAW,OAAS,aAE1C,QAAC,SAAEA,GAAH,SAAmBA,EAAWT,GAAS,MAElD,QAAC,YAAEU,EAAF,OAAeC,GAAhB,SAA+BD,EAA4D,GAA7D,8BAAsCR,GAASS,GAA/C,SAyDlC,I,MAAA,GA5CkC,IAO5B,IAP6B,IACjC7L,EADiC,OAEjC6L,EAAS,EAFwB,WAGjCC,GAAa,EAHoB,OAIjCL,GAAS,EAJwB,QAKjCF,GAAU,EALuB,YAMjCK,EAAc,IACV,EACJ,MAAM5D,GAAWG,EAAAA,EAAAA,MAgBjB,OACE,gBAACmD,GAAD,CACE5C,KAAI,wBAAmB1I,GACvBuL,QAASA,EACTE,OAAQA,EACRvC,QAZ2BQ,IAC7BA,EAAMqC,kBACDD,GAAeF,GAClB5D,EAASzE,EAAQN,eAAejD,MAW/B6L,EAAS,GACR,gBAACH,GAAD,CACEhD,KAAI,sBAAiB1I,GACrB2L,SAAUG,EACV5C,QAzBkBQ,IACxBA,EAAMqC,kBACDH,GACH5D,EAASzE,EAAQP,gBAAiB8I,OAAmB5P,EAAN8D,KAuB3C4L,YAAaA,EACbC,OAAQA,M,mHErHX,MAAMG,GAAiB/D,GAAAA,EAAAA,QAAH,QAAG,uKASjB,QAAC,OAAE6C,GAAH,SAAiBA,EAAS,EAAI,MAGrCmB,GAAgBhE,GAAAA,EAAAA,EAAH,QAAG,4EA8CtB,I,GAAA,GAxCsB,KACpB,MAAMiE,GAAe1C,EAAAA,EAAAA,KAAY,QAAC,KAAExF,GAAH,UAA4BA,EAAKP,gBAC5D,cACJ3H,EADI,aAEJM,EAFI,iBAGJH,EAAmB,KACjBuN,EAAAA,EAAAA,KAAY,QAAC,IAAEzF,GAAH,SAAyBA,KAEnCoI,EAAexR,KAAKC,MAAMkB,EAAcrB,OxCnCjB,GwCmC6C,EAE1E,OAAKqB,EAAcrB,OAKjB,gBAACuR,GAAD,CAAgBtD,KAAK,YAAYoC,OAAQoB,GACtCpQ,EAAc3B,KAAI,CAACiS,EAAiBC,KACnC,MAAMvO,EAAInD,KAAKC,MAAMyR,ExC5CE,GwC6CjBzL,EAAIyL,ExC7Ca,EwC8CjBd,EAZQvP,IAYE4E,EACV4K,EAAW1N,IAAMqO,EACjBV,EAAe,IAAN7K,EACf,OACE,gBAAC,GAAD,CACE0I,IAAG,UAAKxL,EAAL,YAAU8C,GACbZ,IAAKqM,EACLR,OAAQO,EACRN,WAAY1P,IAAiBiQ,EAC7BZ,OAAQA,EACRF,QAASA,EACTC,SAAUA,EACVI,YAAa3P,EAAiBoQ,QAIpC,uBAAKC,MAAO,CAAEC,MAAO,WAxBhB,gBAACN,GAAD,CAAevD,KAAK,iBAApB,gBCrCX,MAAMR,GAAOD,GAAAA,EAAAA,IAAH,Q,gHAAG,mDAab,I,MAAA,GARoB,IAEhB,gBAAC,GAAD,CAAMS,KAAK,aACT,gBAAC,GAAD,O,mHCJN,MAAMR,GAAOD,GAAAA,EAAAA,IAAH,QAAG,yRAQPuE,IAAYC,EAAAA,GAAAA,IAAH,QAAG,6JA6BlB,OATgB,IACd,gBAAC,GAAD,CAAM/D,KAAK,WACT,gBAAC,MAAD,CAAQgE,OAAQF,KAChB,gBAAC,GAAD,MACA,gBAAC,GAAD,MACA,gBAAC,GAAD,OCzBJ,OAVa,IAET,gBAAC,EAAAG,WAAD,KACE,gBAAC,KAAD,CAAUpF,MAAOA,IACf,gBAAC,GAAD,QCNRqF,EAAAA,OAAgB,gBAAC,GAAD,MAAUzC,SAASC,eAAe,W","sources":["webpack://lines/./src/utils/createArrayBySize.ts","webpack://lines/./src/utils/shuffle.ts","webpack://lines/./src/utils/generateCellsByCount.ts","webpack://lines/./src/utils/generateCellsByPercent.ts","webpack://lines/./src/utils/createGameField.ts","webpack://lines/./src/App/initialState.ts","webpack://lines/./src/utils/getNewCells.ts","webpack://lines/./src/utils/filterChainsByInd.ts","webpack://lines/./src/utils/getIndByPos.ts","webpack://lines/./src/utils/getChainByInd.ts","webpack://lines/./src/utils/getPosByInd.ts","webpack://lines/./src/utils/getChainsByInd.ts","webpack://lines/./src/utils/getOutdatedChains.ts","webpack://lines/./src/utils/uuidv4.ts","webpack://lines/./src/utils/setCell.ts","webpack://lines/./src/utils/moveToCell.ts","webpack://lines/./src/utils/delay.ts","webpack://lines/./src/utils/getOutdatedCells.ts","webpack://lines/./src/utils/getHighlightedCells.ts","webpack://lines/./src/utils/addNewCellsToGameField.ts","webpack://lines/./src/utils/Lee.ts","webpack://lines/./src/App/appSlice.ts","webpack://lines/./src/modules/Auth/authSlice.ts","webpack://lines/./src/store/rootReducer.ts","webpack://lines/./src/modules/Auth/fakeAuthProvider.ts","webpack://lines/./src/modules/Auth/authSaga.ts","webpack://lines/./src/utils/removeOutdatedChains.ts","webpack://lines/./src/App/appSaga.ts","webpack://lines/./src/store/index.ts","webpack://lines/./src/store/rootSaga.ts","webpack://lines/./src/store/rehydrateApp.ts","webpack://lines/./src/layout/Panel.ts","webpack://lines/./src/modules/Auth/AuthForm.tsx","webpack://lines/./src/components/Button.tsx","webpack://lines/./src/components/Select.tsx","webpack://lines/./src/modules/UserForm/index.tsx","webpack://lines/./src/modules/Auth/AuthStatus.tsx","webpack://lines/./src/components/Loading.tsx","webpack://lines/./src/modules/Auth/AuthLayout.tsx","webpack://lines/./src/modules/Auth/RequireAuth.tsx","webpack://lines/./src/App/AppRouter.tsx","webpack://lines/./src/App/AppHeader.tsx","webpack://lines/./src/App/AppBottom.tsx","webpack://lines/./src/modules/Cell/index.tsx","webpack://lines/./src/modules/Cell/constatnts.ts","webpack://lines/./src/modules/GameField/index.tsx","webpack://lines/./src/App/AppBody.tsx","webpack://lines/./src/App/index.tsx","webpack://lines/./src/Root.tsx","webpack://lines/./src/index.tsx"],"sourcesContent":["const createIndexArrayBySize = (size: number = 0) =>\n  Object.keys([...Array(size)]).map((v) => parseInt(v));\n\nexport default createIndexArrayBySize;\n","const shuffle = (array: Array<number>) => {\n  const rez = [...array];\n  for (let i = rez.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    let temp = rez[i];\n    rez[i] = rez[j];\n    rez[j] = temp;\n  }\n  return rez;\n};\n\nexport default shuffle;\n","const generateCellsByCount = (countFilledCells: number) => (randomArray: Array<number>) => {\n  const rez = randomArray.map(() => 0);\n  for (let i = 0; i < countFilledCells; i = i + 1) {\n    rez[randomArray[i]] = Math.floor(Math.random() * 3 + 1);\n  }\n  return rez;\n};\n\nexport default generateCellsByCount;\n","import generateCellsByCount from '@src/utils/generateCellsByCount';\n\nconst generateCellsByPercent = (fillPercent: number) => (randomArray: Array<number>) => {\n  let countFilledCells = parseInt(((randomArray.length * fillPercent) / 100).toFixed(), 10);\n  return generateCellsByCount(countFilledCells)(randomArray);\n};\n\nexport default generateCellsByPercent;\n","import { compose } from 'ramda';\nimport createIndexArrayBySize from '@src/utils/createArrayBySize';\nimport shuffle from '@src/utils/shuffle';\nimport generateCellsByPercent from '@src/utils/generateCellsByPercent';\n\nconst createGameField = (size: number, fillPercent: number = 30) => {\n  return compose(generateCellsByPercent(fillPercent), shuffle, createIndexArrayBySize)(size);\n};\n\nexport default createGameField;\n","import { IAppState } from '@src/App/model/IAppState';\nimport createGameField from '@src/utils/createGameField';\n\nexport const GAME_FIELD_SIZE = 9;\n\nexport const INIT_GAME_LEVEL = '1';\nexport const INIT_GAME_FIELD_PERCENT_FILLED = 0;\n\ninterface ISettings {\n  percent: number;\n  chain: number;\n  increase: number;\n}\ninterface IProps {\n  [key: string]: ISettings;\n}\nexport const GAME_LEVEL_SETTINGS: IProps = {\n  '1': { percent: 10, chain: 2, increase: 3 },\n  '2': { percent: 20, chain: 3, increase: 4 },\n  '3': { percent: 30, chain: 4, increase: 5 },\n};\n\nconst initialState: IAppState = {\n  userLevel: INIT_GAME_LEVEL,\n  gameFieldPercentFilled: 0,\n  gameFieldData: createGameField(GAME_FIELD_SIZE ** 2, INIT_GAME_FIELD_PERCENT_FILLED),\n  highlightedCells: undefined,\n  score: 0,\n  selectedCell: undefined,\n  isLoading: false,\n};\n\nexport default initialState;\n","import { compose } from 'ramda';\nimport shuffle from '@src/utils/shuffle';\nimport { GAME_LEVEL_SETTINGS } from '@src/App/initialState';\n\nconst getFreeCells = (cells: Array<number>) =>\n  cells.map((cell, ind) => (!cell ? ind : -1)).filter((pos) => pos > -1);\n\nconst generateNewCells = (countCells: number) => (randomArray: Array<number>) =>\n  randomArray.slice(0, countCells);\n\nconst getNewCells = (cells: Array<number>, level: string) => {\n  const increase = GAME_LEVEL_SETTINGS[level].increase;\n  return compose(generateNewCells(increase), shuffle, getFreeCells)(cells);\n};\n\nexport default getNewCells;\n","const filterChainByX = (chains: number[][] | undefined, ind: number) =>\n  chains && chains.filter((chain) => chain.indexOf(ind) > -1)[0];\n\nconst filterChainByY = (chains: number[][] | undefined, ind: number) =>\n  chains && chains.filter((chain) => chain.indexOf(ind) > -1)[0];\n\nconst filterChainsByInd = (ind: number) => (chains: number[][][]) => {\n  const lineX = filterChainByX(chains[0], ind);\n  const lineY = filterChainByY(chains[1], ind);\n  const rez = [];\n  if (lineX) {\n    rez.push(lineX);\n  }\n  if (lineY) {\n    rez.push(lineY);\n  }\n  return rez;\n};\n\nexport default filterChainsByInd;\n","import { GAME_FIELD_SIZE } from '@src/App/initialState';\n\nconst getIndByPos = (pos: Array<number>): number => {\n  return pos[0] + pos[1] * GAME_FIELD_SIZE;\n};\n\nexport default getIndByPos;\n","import getIndByPos from '@src/utils/getIndByPos';\nimport { GAME_FIELD_SIZE, GAME_LEVEL_SETTINGS } from '@src/App/initialState';\n\nconst VERTICAL = 'V';\nconst HORIZONTAL = 'H';\n\ntype TDirection = typeof VERTICAL | typeof HORIZONTAL;\ninterface ILines {\n  [key: string]: Array<number>;\n}\n\nconst getChainByInd = (\n  direction: TDirection,\n  pos: number,\n  level: string,\n  cells: Array<number>,\n  idColor: number\n) => {\n  const chains: Array<Array<number>> = [];\n  const lines: ILines = {\n    1: [],\n    2: [],\n    3: [],\n  };\n  const maxChainLen = GAME_LEVEL_SETTINGS[level].chain;\n  for (let i = 0; i < GAME_FIELD_SIZE; i = i + 1) {\n    const curPos: [number, number] = direction === 'H' ? [i, pos] : [pos, i];\n    const curInd = getIndByPos(curPos);\n    const curIdColor = cells[curInd];\n    if (!cells[curInd] || curIdColor !== idColor) {\n      if (idColor && lines[idColor].length > maxChainLen) {\n        chains.push([...lines[idColor]]);\n      }\n      lines[idColor] = [];\n    } else {\n      lines[idColor].push(curInd);\n    }\n  }\n  if (lines[idColor].length > maxChainLen) {\n    chains.push([...lines[idColor]]);\n  }\n  return chains;\n};\n\nexport { getChainByInd, VERTICAL, HORIZONTAL };\n","import { GAME_FIELD_SIZE } from '@src/App/initialState';\n\nconst getPosByInd = (ind: number): Array<number> => {\n  const y = Math.min(Math.max(Math.ceil((ind + 1) / GAME_FIELD_SIZE) - 1, 0), GAME_FIELD_SIZE - 1);\n  const x = Math.min(Math.max(ind - y * GAME_FIELD_SIZE, 0), GAME_FIELD_SIZE - 1);\n  return [x, y];\n};\n\nexport default getPosByInd;\n","import { getChainByInd, HORIZONTAL, VERTICAL } from '@src/utils/getChainByInd';\nimport getPosByInd from '@src/utils/getPosByInd';\n\nconst getVerticalChain = (order: number, level: string, cells: Array<number>, idColor: number) =>\n  getChainByInd(VERTICAL, order, level, cells, idColor);\n\nconst getHorizontalChain = (order: number, level: string, cells: Array<number>, idColor: number) =>\n  getChainByInd(HORIZONTAL, order, level, cells, idColor);\n\nconst getChainsByInd = (targetCell: number, level: string) => (cells: Array<number>) => {\n  const pos = getPosByInd(targetCell);\n  const chainsV = getVerticalChain(pos[0], level, cells, cells[targetCell]);\n  const chainsH = getHorizontalChain(pos[1], level, cells, cells[targetCell]);\n  const rez = [];\n  if (chainsV.length) {\n    rez.push(chainsV);\n  }\n  if (chainsH.length) {\n    rez.push(chainsH);\n  }\n  return rez;\n};\n\nexport default getChainsByInd;\n","import { compose } from 'ramda';\n\nimport filterChainsByInd from '@src/utils/filterChainsByInd';\nimport getChainsByInd from '@src/utils/getChainsByInd';\n\nconst getOutdatedChains = (ind: number, level: string, cells: Array<number>) => {\n  return compose(filterChainsByInd(ind), getChainsByInd(ind, level))(cells);\n};\n\nexport default getOutdatedChains;\n","const uuidv4 = () => {\n  return `${1e7}${-1e3}${-4e3}${-8e3}${-1e11}`.replace(/[018]/g, (c: unknown) =>\n    (\n      (c as number) ^\n      (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> ((c as number) / 4)))\n    ).toString(16)\n  );\n};\n\nexport default uuidv4;\n","export default (ind: number | undefined, value: Readonly<number> = 1) =>\n  (cells: ReadonlyArray<number> = []) => {\n    const rez = [...cells];\n    if (ind != null && ind > -1 && ind < cells.length) {\n      rez[ind] = value;\n    }\n    return rez;\n  };\n","import { compose } from 'ramda';\n\nimport setCell from '@src/utils/setCell';\n\nexport default (cells: ReadonlyArray<number>, selectedCell?: number, targetCell?: number) => {\n  if (selectedCell == null || targetCell == null) {\n    return cells;\n  }\n  return compose(setCell(targetCell, cells[selectedCell]), setCell(selectedCell, 0))(cells);\n};\n","export default (time: number = 0) => new Promise((resolve) => setTimeout(resolve, time));\n","import { ICellsProps } from '@src/App/model/ICellsProps';\n\nexport const getOutdatedCells = (chains: Array<Array<number>>) =>\n  chains.reduce((rez, chain) => {\n    return chain.reduce((acc: ICellsProps, cur) => {\n      acc[cur] = '';\n      return acc;\n    }, rez);\n  }, {});\n","import { ICellsProps } from '@src/App/model/ICellsProps';\n\nexport const getHighlightedCells = (cells: Array<number>): ICellsProps => {\n  const highlightedCells: ICellsProps = {};\n  cells.forEach((id) => {\n    highlightedCells[id] = '';\n  });\n  return highlightedCells;\n};\n","import { ICellsProps } from '@src/App/model/ICellsProps';\n\nexport const addNewCellsToGameField = (\n  gameData: Array<number>,\n  highlightedCells: ICellsProps\n): Array<number> => {\n  const gameFieldData: Array<number> = [...gameData];\n  Object.keys(highlightedCells).forEach((num) => {\n    gameFieldData[Number(num)] = Math.floor(Math.random() * 3 + 1);\n  });\n  return gameFieldData;\n};\n","/**\n * Реализации алгоритма Ли\n * Алгоритм волновой трассировки (волновой алгоритм, алгоритм Ли) — алгоритм поиска пути,\n * алгоритм поиска кратчайшего пути на планарном графе.\n **/\nimport { getPosByInd } from '@src/utils/index';\n\nconst WALL = -1; // непроходимая ячейка\nconst BLANK = -2; // свободная непомеченная ячейка\n\nconst initLee = (dwf?: Array<number>) => {\n  /**\n   * Размер дискретного рабочего поля\n   */\n  const SIZE = Array.isArray(dwf) && Math.sqrt(dwf.length);\n  if (!SIZE) {\n    return null;\n  }\n\n  /**\n   * Создаем дискретное рабочее поле из игрового поля\n   */\n  const createGrid = () => {\n    // массив grid заполнен значениями WALL и BLANK\n    const grid: Array<Array<number>> = [];\n    for (let i = 0; i < SIZE; i = i + 1) {\n      const begin = SIZE * grid.length;\n      const end = begin + SIZE;\n      grid.push(dwf.slice(begin, end).map((j) => (j ? WALL : BLANK)));\n    }\n    return grid;\n  };\n\n  /**\n   * Валидация произвольной точки внутри дискретного рабочего поля\n   */\n  const validateOutbounds = (x: number, y: number) => x >= 0 && x < SIZE && y >= 0 && y < SIZE;\n\n  /**\n   * Валидация начальной и конечной точки внутри дискретного рабочего поля\n   */\n  const validatePoints = (p1: Array<number>, p2: Array<number>) =>\n    validateOutbounds(p2[0], p2[1]) && validateOutbounds(p1[0], p1[1]);\n\n  return {\n    SIZE,\n    validatePoints,\n    validateOutbounds,\n    createGrid,\n  };\n};\n\n// поиск пути из ячейки (ax, ay) в ячейку (bx, by)\nexport const lee = (\n  gameField?: Array<number>,\n  from?: Array<number> | number,\n  to?: Array<number> | number\n) => {\n  const self = initLee(gameField);\n  if (!self || from == null || to == null) {\n    return null;\n  }\n  const grid = self.createGrid();\n  const ax: number = Array.isArray(from) ? from[0] : getPosByInd(from)[1];\n  const ay: number = Array.isArray(from) ? from[1] : getPosByInd(from)[0];\n  const bx: number = Array.isArray(to) ? to[0] : getPosByInd(to)[1];\n  const by: number = Array.isArray(to) ? to[1] : getPosByInd(to)[0];\n  const dx = [1, 0, -1, 0]; // смещения, соответствующие соседям ячейки\n  const dy = [0, 1, 0, -1]; // справа, снизу, слева и сверху\n\n  const px = Array(self.SIZE ** 2); // координаты ячеек по оси X, входящих  путь\n  const py = Array(self.SIZE ** 2); // координаты ячеек по оси Y, входящих  путь\n  let len: number; // длина пути\n  let stop: boolean;\n\n  // координаты начальной вне рабочего поля\n  if (!self.validatePoints([ax, ay], [bx, by])) {\n    return null;\n  }\n\n  // ячейка (ax, ay) или (bx, by) - стена\n  if (grid[bx][by] === WALL) {\n    return null;\n  }\n\n  // распространение волны\n  let d: number = 0;\n  grid[ax][ay] = 0; // стартовая ячейка помечена 0\n  do {\n    stop = true; // предполагаем, что все свободные клетки уже помечены\n    for (let x = 0; x < self.SIZE; x = x + 1) {\n      for (let y = 0; y < self.SIZE; y = y + 1) {\n        // ячейка (x, y) помечена числом d\n        if (grid[x][y] === d) {\n          // проходим по всем непомеченным соседям\n          for (let k = 0; k < 4; k = k + 1) {\n            const ix = x + dx[k];\n            const iy = y + dy[k];\n            if (self.validateOutbounds(ix, iy) && grid[ix][iy] === BLANK) {\n              stop = false; // найдены непомеченные клетки\n              grid[ix][iy] = d + 1; // распространяем волну\n            }\n          }\n        }\n      }\n    }\n    d = d + 1;\n  } while (!stop && grid[bx][by] === BLANK);\n\n  if (grid[bx][by] === BLANK) {\n    return null; // путь не найден\n  }\n\n  // восстановление пути\n  len = grid[bx][by]; // длина кратчайшего пути из (ax, ay) в (bx, by)\n  let x = bx;\n  let y = by;\n  d = len;\n  while (d > 0) {\n    px[d] = x;\n    py[d] = y; // записываем ячейку (x, y) в путь\n    d--;\n    for (let k = 0; k < 4; ++k) {\n      const iy = y + dy[k];\n      const ix = x + dx[k];\n      if (self.validateOutbounds(ix, iy) && grid[ix][iy] == d) {\n        x = x + dx[k];\n        y = y + dy[k]; // переходим в ячейку, которая на 1 ближе к старту\n        break;\n      }\n    }\n  }\n  px[0] = ax; // теперь px[0..len]\n  py[0] = ay; // и py[0..len] - координаты ячеек пути\n\n  return px.reduce((accum, curr, ind) => {\n    accum.push([py[ind], curr]);\n    return accum;\n  }, []);\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport initialState, {\n  GAME_LEVEL_SETTINGS,\n  INIT_GAME_FIELD_PERCENT_FILLED,\n  GAME_FIELD_SIZE,\n} from '@src/App/initialState';\nimport { createGameField } from '@src/utils/';\n\nconst appSlice = createSlice({\n  name: 'app',\n  initialState: initialState,\n  reducers: {\n    rehydrate: (state) => state,\n    restoreGame: (state, action) => action.payload,\n    setUserLevel: (state, { payload }: PayloadAction<string>) => {\n      state.userLevel = payload;\n      state.selectedCell = undefined;\n      state.highlightedCells = undefined;\n      state.score = 0;\n      state.gameFieldPercentFilled = GAME_LEVEL_SETTINGS[payload].percent;\n      state.gameFieldData = createGameField(GAME_FIELD_SIZE ** 2, state.gameFieldPercentFilled);\n    },\n    setSelectedCell: (state, { payload }: PayloadAction<number | undefined>) => {\n      state.selectedCell = payload;\n    },\n    startGameSteps: (state, { payload }: PayloadAction<number>) => state,\n    updateGame: (state, action) => ({ ...state, ...action.payload }),\n    initApp: (state) => {\n      state.gameFieldPercentFilled = INIT_GAME_FIELD_PERCENT_FILLED;\n      state.gameFieldData = createGameField(GAME_FIELD_SIZE ** 2, 0);\n    },\n    resetApp: (state) => {\n      const gameFieldPercentFilled = Number(state.userLevel) * 10;\n      state.selectedCell = undefined;\n      state.highlightedCells = undefined;\n      state.score = 0;\n      state.gameFieldPercentFilled = gameFieldPercentFilled;\n      state.gameFieldData = createGameField(GAME_FIELD_SIZE ** 2, gameFieldPercentFilled);\n    },\n    waitOn: (state) => {\n      state.isLoading = true;\n    },\n    waitOff: (state) => {\n      state.isLoading = false;\n    },\n  },\n});\n\nconst { actions, reducer } = appSlice;\n\nexport { appSlice, actions, reducer };\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IUserProfile } from '@src/modules/Auth/model/IUserProfile';\nimport { IUserInfo } from '@src/modules/Auth/AuthForm';\n\ninterface IAuthState {\n  userProfile: IUserProfile | undefined;\n}\nconst initialState: IAuthState = {\n  userProfile: undefined,\n};\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    rehydrate: (state) => state,\n    setUser: (state, { payload }: PayloadAction<IUserInfo | undefined>) => state,\n    login: (state, { payload }: PayloadAction<IUserProfile | undefined>) => {\n      state.userProfile = payload;\n    },\n    logout: (state) => {\n      state.userProfile = undefined;\n    },\n  },\n});\n\nconst { actions, reducer } = authSlice;\n\nexport { authSlice, actions, reducer };\n","import { reducer as app } from '@src/App/appSlice';\nimport { reducer as auth } from '@src/modules/Auth/authSlice';\nimport { ReducersMapObject } from '@reduxjs/toolkit';\n\nexport const rootReducer: ReducersMapObject = { app, auth };\n","import { IUserInfo } from '@src/modules/Auth/AuthForm';\nimport { IUserProfile } from '@src/modules/Auth/model/IUserProfile';\nimport { uuidv4 } from '@src/utils';\nimport { LOCAL_STORAGE_AUTH_KEY } from '@src/store';\n\n/**\n * This represents some generic auth provider API.\n */\nconst signIn = (userInfo: IUserInfo): Promise<IUserProfile> => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        if (!userInfo) {\n          throw 'Нет данных о пользователе!';\n        }\n        let userProfile: IUserProfile = { ...userInfo, token: uuidv4() };\n        localStorage.setItem(LOCAL_STORAGE_AUTH_KEY, JSON.stringify(userProfile));\n        resolve(userProfile);\n      } catch (err) {\n        reject((err as string) || 'Ошибка получения данных!');\n      }\n    }, 500); // fake async\n  });\n};\n\nconst signOut = (): Promise<boolean> => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      localStorage.removeItem(LOCAL_STORAGE_AUTH_KEY);\n      resolve(true);\n    }, 500); // fake async\n  });\n};\n\nexport { signIn, signOut };\n","import { call, put, takeEvery } from 'redux-saga/effects';\nimport { actions as authActions } from '@src/modules/Auth/authSlice';\nimport { actions as appActions } from '@src/App/appSlice';\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { signIn, signOut } from '@src/modules/Auth/fakeAuthProvider';\nimport { IUserInfo } from '@src/modules/Auth/AuthForm';\nimport { IUserProfile } from '@src/modules/Auth/model/IUserProfile';\n// import { LOCAL_STORAGE_AUTH_KEY } from '@src/store';\n\nexport function* watchSetUser({ payload }: PayloadAction<IUserInfo>): Generator {\n  yield put(appActions.waitOn());\n  let userProfile = yield call(signIn, payload);\n  if (userProfile) {\n    yield put(authActions.login(userProfile as IUserProfile));\n    yield put(appActions.resetApp());\n  }\n  yield put(appActions.waitOff());\n}\n\nexport function* watchLogout(): Generator {\n  yield put(appActions.waitOn());\n  yield call(signOut);\n  yield put(appActions.initApp());\n  yield put(appActions.waitOff());\n}\n\nexport function* watchRehydrate(): Generator {\n  const persistedAuth = yield call([localStorage, localStorage.getItem], 'lines:userProfile');\n  if (persistedAuth) {\n    const userProfile = yield call([JSON, JSON.parse], persistedAuth as string);\n    yield put(authActions.login(userProfile as IUserProfile));\n  }\n}\n\nexport function* authSaga() {\n  yield takeEvery(authActions.setUser.type, watchSetUser);\n  yield takeEvery(authActions.logout.type, watchLogout);\n  yield takeEvery(authActions.rehydrate.type, watchRehydrate);\n}\n","const removeOutdatedChains = (cells: Array<number>, chains: Array<Array<number>>) => {\n  const rez = [...cells];\n  const hasChains = chains.length > 0;\n  if (hasChains) {\n    chains.forEach(\n      (chain) =>\n        chain &&\n        chain.forEach((ind) => {\n          rez[ind] = 0;\n        })\n    );\n  }\n  return rez;\n};\n\nexport default removeOutdatedChains;\n","import {\n  call,\n  put,\n  takeEvery,\n  select,\n  SelectEffect,\n  PutEffect,\n  CallEffect,\n} from 'redux-saga/effects';\nimport { actions as appActions, actions } from '@src/App/appSlice';\nimport { LOCAL_STORAGE_APP_KEY, TRootState } from '@src/store';\nimport {\n  addNewCellsToGameField,\n  delay,\n  getHighlightedCells,\n  getIndByPos,\n  getOutdatedCells,\n  lee,\n  moveToCell,\n} from '@src/utils';\nimport { IAppState } from '@src/App/model/IAppState';\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport getOutdatedChains from '@src/utils/getOutdatedChains';\nimport { ICellsProps } from '@src/App/model/ICellsProps';\nimport removeOutdatedChains from '@src/utils/removeOutdatedChains';\nimport getNewCells from '@src/utils/getNewCells';\n\nexport function* watchRehydrate(): Generator<\n  SelectEffect | PutEffect | CallEffect,\n  void,\n  IAppState\n> {\n  yield put(appActions.waitOn());\n  const persistedApp = yield call([localStorage, localStorage.getItem], LOCAL_STORAGE_APP_KEY);\n  if (persistedApp) {\n    const dataApp = yield call([JSON, JSON.parse], persistedApp as unknown as string);\n    yield put(actions.restoreGame(dataApp));\n  }\n  yield put(appActions.waitOff());\n}\n\nexport const getApp = (state: TRootState) => state.app;\n\nexport function* watchPersist(): Generator<SelectEffect | PutEffect | CallEffect, void, IAppState> {\n  const app = yield select(getApp);\n  yield call([localStorage, localStorage.setItem], LOCAL_STORAGE_APP_KEY, JSON.stringify(app));\n}\n\n/**\n * showCell\n * show target cell with props\n **/\nexport function* showCell(\n  targetCell: number,\n  props: { highlightedCells?: ICellsProps } = {}\n): Generator<SelectEffect | PutEffect | CallEffect, void, IAppState> {\n  const { gameFieldData: gameData, selectedCell } = yield select(getApp);\n\n  let gameFieldData = yield call(moveToCell, gameData, selectedCell, targetCell);\n  yield put(appActions.updateGame({ gameFieldData, selectedCell: targetCell, ...props }));\n}\n\n/**\n * Step 0\n * show target cell as unreachable with delay\n **/\nexport function* step0(\n  selectedCell: number,\n  targetCell: number,\n  time: number\n): Generator<SelectEffect | PutEffect | CallEffect, void, IAppState> {\n  yield* showCell(targetCell, { highlightedCells: { [targetCell]: '#00000070' } });\n  yield call(delay, time);\n  yield* showCell(selectedCell, { highlightedCells: undefined });\n}\n\n/**\n * moveTo\n * move cell from source to target and show it\n **/\nexport function* moveTo(\n  p1: Array<number>,\n  p2: Array<number>,\n  time: number\n): Generator<SelectEffect | PutEffect | CallEffect, void, IAppState> {\n  const { gameFieldData: gameData } = yield select(getApp);\n  const from = Number(yield call(getIndByPos, p1));\n  const to = Number(yield call(getIndByPos, p2));\n  const gameFieldData = yield call(moveToCell, gameData, from, to);\n  const highlightedCells = { [to]: '' };\n  yield put(appActions.updateGame({ gameFieldData, highlightedCells }));\n  yield call(delay, time);\n}\n\n/**\n * Step 1\n * move cell from selected to target and show it with delay\n **/\nexport function* step1(\n  targetCell: number,\n  route: Array<Array<number>>,\n  time: number = 0\n): Generator<SelectEffect | PutEffect | CallEffect, void, IAppState> {\n  yield put(appActions.updateGame({ selectedCell: undefined }));\n  for (let i = 1; i < route.length; i = i + 1) {\n    yield* moveTo(route[i - 1], route[i], 100);\n  }\n\n  const highlightedCells = { [targetCell]: '' };\n  yield put(appActions.updateGame({ highlightedCells }));\n  yield call(delay, time);\n}\n\n/**\n * Step 2\n * get outdated cells and show it with delay\n **/\nexport function* step2(\n  chains: Array<Array<number>>,\n  time: number\n): Generator<SelectEffect | PutEffect | CallEffect, void, IAppState> {\n  const highlightedCells = yield call(getOutdatedCells, chains);\n  yield put(appActions.updateGame({ highlightedCells }));\n  yield call(delay, time);\n}\n\n/**\n * Step 3\n * remove outdated cells from game field\n **/\nexport function* step3(\n  chains: Array<Array<number>>\n): Generator<SelectEffect | PutEffect | CallEffect, void, IAppState> {\n  const app = yield select(getApp);\n  const {\n    gameFieldData: gameData,\n    score: oldScore,\n    highlightedCells,\n  } = app as unknown as IAppState;\n\n  const gameFieldData = yield call(removeOutdatedChains, gameData, chains);\n  const score =\n    oldScore +\n    (highlightedCells ? Object.keys(highlightedCells as unknown as ICellsProps).length : 0);\n  yield put(\n    appActions.updateGame({\n      gameFieldData,\n      highlightedCells: undefined,\n      score,\n    })\n  );\n}\n\n/**\n * Step 4\n * get new cells and show it on game field\n **/\nexport function* step4(\n  time: number\n): Generator<SelectEffect | PutEffect | CallEffect, void, IAppState> {\n  const { gameFieldData: gameData, userLevel } = yield select(getApp);\n\n  const newCells = yield call(getNewCells, gameData, userLevel);\n  const highlightedCells = yield call(getHighlightedCells, newCells as unknown as Array<number>);\n  const gameFieldData = yield call(\n    addNewCellsToGameField,\n    gameData as unknown as Array<number>,\n    highlightedCells as unknown as ICellsProps\n  );\n  yield put(appActions.updateGame({ gameFieldData, highlightedCells }));\n  yield call(delay, time);\n}\n\n/**\n * Step 5\n * update game field with un-highlighted new cells\n **/\nexport function* step5(): Generator<SelectEffect | PutEffect | CallEffect, void, IAppState> {\n  yield put(appActions.updateGame({ highlightedCells: undefined }));\n}\n\nexport function* watchStartGameSteps({\n  payload,\n}: PayloadAction<number>): Generator<SelectEffect | PutEffect | CallEffect, void, IAppState> {\n  const { gameFieldData: gameData, selectedCell, userLevel } = yield select(getApp);\n  if (selectedCell != null && !gameData[payload]) {\n    const route = yield call(lee, gameData, selectedCell, payload);\n    let gameFieldData;\n    if (!route) {\n      yield* step0(selectedCell, payload, 250);\n      return;\n    } else {\n      yield* step1(payload, route as unknown as Array<Array<number>>, 250);\n      gameFieldData = yield call(moveToCell, gameData, selectedCell, payload);\n    }\n    const outdatedChains = yield call(\n      getOutdatedChains,\n      Number(payload),\n      userLevel.toString(),\n      gameFieldData as unknown as Array<number>\n    );\n    if (Array.isArray(outdatedChains) && outdatedChains.length) {\n      yield* step2(outdatedChains, 100);\n      yield* step3(outdatedChains);\n    } else {\n      yield* step4(250);\n      yield* step5();\n    }\n    yield* watchPersist();\n  }\n}\n\nexport function* appSaga() {\n  yield takeEvery(actions.rehydrate.type, watchRehydrate);\n  yield takeEvery(actions.setUserLevel.type, watchPersist);\n  yield takeEvery(actions.startGameSteps.type, watchStartGameSteps);\n  yield takeEvery(actions.resetApp.type, watchPersist);\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { rootReducer } from '@src/store/rootReducer';\nimport { rehydrateApp } from '@src/store/rehydrateApp';\nimport { rootSaga } from '@src/store/rootSaga';\n\nexport const LOCAL_STORAGE_APP_KEY = 'lines:app';\nexport const LOCAL_STORAGE_AUTH_KEY = 'lines:userProfile';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware()\n      .prepend\n      // correctly typed middlewares can just be used\n      ()\n      // prepend and concat calls can be chained\n      .concat(sagaMiddleware)\n      .concat(logger),\n});\n\nsagaMiddleware.run(rootSaga);\n\nrehydrateApp();\n\ntype TRootState = ReturnType<typeof store.getState>;\n\nexport { store, TRootState };\n","import { all } from 'redux-saga/effects';\nimport { authSaga } from '@src/modules/Auth/authSaga';\nimport { appSaga } from '@src/App/appSaga';\n\nexport function* rootSaga() {\n  yield all([authSaga(), appSaga()]);\n}\n","import { actions } from '@src/modules/Auth/authSlice';\nimport { store } from '@src/store/index';\n\nexport const rehydrateApp = () => {\n  store.dispatch(actions.rehydrate());\n};\n","import styled from '@emotion/styled';\n\nconst Panel = styled.div`\n  background-color: #000;\n  height: 10vh;\n  display: flex;\n  justify-content: center;\n  font-size: 16px;\n`;\n\nexport default Panel;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { FC, useState } from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport styled from '@emotion/styled';\n\nimport { useDispatch } from 'react-redux';\nimport { actions } from '@src/modules/Auth/authSlice';\n\nconst Root = styled.div`\n  font-size: 16px;\n\n  label {\n    margin-right: 5px;\n  }\n\n  button {\n    margin: 5px;\n  }\n\n  input {\n    margin-right: 30px;\n    width: 100px;\n  }\n\n  form {\n    margin: 3vh 0;\n  }\n`;\n\nexport interface IUserFormProps {\n  onSubmit: (values: IUserInfo) => void;\n}\n\nexport type IUserInfo = {\n  login: string;\n  password: string;\n};\n\nconst AuthForm: FC = () => {\n  const dispatch = useDispatch();\n  const { setUser } = actions;\n\n  const [userInfo, setUserInfo] = useState<IUserInfo>({ login: '', password: '' });\n\n  const handleSubmit = () => {\n    dispatch(setUser(userInfo));\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { id, value } = e.currentTarget;\n    setUserInfo({ ...userInfo, [id]: value });\n  };\n\n  return (\n    <Root role=\"authForm\">\n      <Formik initialValues={{ ...userInfo }} onSubmit={handleSubmit}>\n        <Form>\n          <label htmlFor=\"login\">Имя</label>\n          <Field\n            role=\"login\"\n            id=\"login\"\n            name=\"login\"\n            placeholder=\"Введите логин\"\n            value={userInfo.login}\n            onChange={handleChange}\n          />\n\n          <label htmlFor=\"password\">Пароль</label>\n          <Field\n            role=\"password\"\n            id=\"password\"\n            name=\"password\"\n            placeholder=\"Введите пароль\"\n            value={userInfo.password}\n            onChange={handleChange}\n          />\n\n          <button role=\"buttonLogin\" disabled={!userInfo.login || !userInfo.password} type=\"submit\">\n            Войти\n          </button>\n        </Form>\n      </Formik>\n    </Root>\n  );\n};\n\nexport default AuthForm;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { FC } from 'react';\n\nconst Root = styled.button`\n  height: 30px;\n  margin: auto 20px;\n`;\n\nexport interface IButton {\n  title?: string;\n  onClick?: () => void;\n  role?: string;\n}\nconst Button: FC<IButton> = ({ title = 'Button', onClick, role = 'button' }) => {\n  return (\n    <Root role={role} onClick={onClick}>\n      {title}\n    </Root>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { FC } from 'react';\n\nconst levelList = [\n  { id: '1', name: 'Падаван' },\n  { id: '2', name: 'Джедай' },\n  {\n    id: '3',\n    name: 'Член Совета Силы',\n  },\n];\n\nconst Root = styled.div`\n  display: flex;\n\n  select {\n    height: 30px;\n    margin: auto 5px;\n  }\n\n  p {\n    margin: auto;\n  }\n`;\n\nexport interface ISelect {\n  onSelect?: (level: React.ChangeEvent<HTMLSelectElement>) => void;\n  selectedLevel?: string;\n}\nconst Select: FC<ISelect> = ({ onSelect, selectedLevel }) => {\n  return (\n    <Root>\n      <p>Уровень</p>\n      <select value={selectedLevel} role=\"select\" name=\"select\" onChange={onSelect}>\n        {levelList.map((level) => (\n          <option key={level.id} role=\"option\" value={level.id}>\n            {level.name}\n          </option>\n        ))}\n      </select>\n    </Root>\n  );\n};\n\nexport default Select;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { FC, memo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Panel from '@src/layout/Panel';\nimport Button from '@src/components/Button';\nimport { actions as appActions } from '@src/App/appSlice';\nimport { actions as authActions } from '@src/modules/Auth/authSlice';\nimport Select from '@src/components/Select';\nimport { TRootState } from '@src/store';\n\nconst UserForm: FC = () => {\n  const { userLevel } = useSelector(({ app }: TRootState) => app);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(appActions.rehydrate());\n  }, []);\n\n  const handleReset = () => {\n    dispatch(appActions.resetApp());\n  };\n\n  const handleSelectLevel = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.currentTarget;\n    dispatch(appActions.setUserLevel(value));\n  };\n\n  const handleLogout = () => {\n    dispatch(authActions.logout());\n  };\n\n  return (\n    <Panel role=\"userForm\">\n      <Button role=\"buttonReset\" onClick={handleReset} title=\"Сброс\" />\n      <Select onSelect={handleSelectLevel} selectedLevel={userLevel} />\n      <Button role=\"buttonLogout\" onClick={handleLogout} title=\"Выйти\" />\n    </Panel>\n  );\n};\n\nexport default memo(UserForm);\n","import React, { FC } from 'react';\nimport styled from '@emotion/styled';\n\nconst Title = styled.p`\n  font-size: 20px;\n  line-height: 30px;\n  margin-right: 20px;\n`;\n\ninterface IAuthStatus {\n  login: string;\n}\nconst AuthStatus: FC<IAuthStatus> = ({ login = '' }) => {\n  if (!login) {\n    return <Title>Lines</Title>;\n  }\n\n  return <Title>{`Игрок: ${login}`}</Title>;\n};\n\nexport default AuthStatus;\n","import React, { memo, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport styled from '@emotion/styled';\nimport { keyframes } from '@emotion/react';\n\n// const loading = document.getElementById('loading');\n\nconst Fullscreen = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst Root = styled(Fullscreen)`\n  background: rgba(0, 0, 0, 0.3);\n\n  article {\n    display: inline-block;\n    width: 64px;\n    height: 64px;\n\n    div {\n      box-sizing: border-box;\n      display: block;\n      position: absolute;\n      width: 51px;\n      height: 51px;\n      margin: 6px;\n      border: 4px solid #0055a6;\n      border-radius: 50%;\n      animation: ${rotate} 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n      border-color: #0055a6 transparent transparent transparent;\n    }\n  }\n`;\n\nconst Loading = () => {\n  const [loading, setLoading] = useState<HTMLElement | null>(null);\n  useEffect(() => {\n    const loading = document.getElementById('loading');\n    setLoading(loading);\n  }, []);\n\n  return (\n    loading &&\n    createPortal(\n      <Root role=\"loading\">\n        <article>\n          <div />\n          <div />\n          <div />\n          <div />\n        </article>\n      </Root>,\n      loading\n    )\n  );\n};\n\nexport default memo(Loading);\n","import React, { FC, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from '@emotion/styled';\n\nimport { TRootState } from '@src/store';\nimport AuthStatus from '@src/modules/Auth/AuthStatus';\nimport { Outlet, useNavigate } from 'react-router-dom';\nimport Loading from '@src/components/Loading';\n\nconst Root = styled.div`\n  display: flex;\n`;\n\ninterface IAuthLayout {\n  login: string;\n}\nconst AuthLayout: FC<IAuthLayout> = ({ login = '' }) => {\n  const { isLoading } = useSelector(({ app }: TRootState) => app);\n  let navigate = useNavigate();\n\n  useEffect(() => {\n    if (login) {\n      navigate('/', { replace: true });\n    }\n  }, [login]);\n\n  return (\n    <Root>\n      <AuthStatus login={login} />\n      <Outlet />\n      {isLoading && <Loading />}\n    </Root>\n  );\n};\n\nexport default AuthLayout;\n","import React, { FC } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\n\ninterface IRequireAuth {\n  login: string;\n  children: JSX.Element;\n}\nconst RequireAuth: FC<IRequireAuth> = ({ children, login }) => {\n  let location = useLocation();\n\n  if (!login) {\n    return <Navigate to=\"/auth\" state={{ from: location }} replace />;\n  }\n\n  return children;\n};\n\nexport default RequireAuth;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { HashRouter, Route, Routes } from 'react-router-dom';\n\nimport AuthForm from '@src/modules/Auth/AuthForm';\nimport UserForm from '@src/modules/UserForm';\nimport AuthLayout from '@src/modules/Auth/AuthLayout';\nimport RequireAuth from '@src/modules/Auth/RequireAuth';\nimport { TRootState } from '@src/store';\n\nconst AppRouter = () => {\n  const { userProfile } = useSelector(({ auth }: TRootState) => auth);\n\n  return (\n    <HashRouter>\n      <Routes>\n        <Route element={<AuthLayout login={userProfile?.login} />}>\n          <Route path=\"/auth\" element={<AuthForm />} />\n          <Route\n            path=\"/\"\n            element={\n              <RequireAuth login={userProfile?.login}>\n                <UserForm />\n              </RequireAuth>\n            }\n          />\n        </Route>\n      </Routes>\n    </HashRouter>\n  );\n};\n\nexport default AppRouter;\n","import React, { FC, memo } from 'react';\nimport Panel from '@src/layout/Panel';\nimport AppRouter from '@src/App/AppRouter';\n\nconst AppHeader: FC = () => (\n  <Panel role=\"topPanel\">\n    <AppRouter />\n  </Panel>\n);\n\nexport default memo(AppHeader);\n","import React, { FC, memo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Panel from '@src/layout/Panel';\nimport styled from '@emotion/styled';\nimport { TRootState } from '@src/store';\n\ninterface IRoot {\n  active: boolean;\n}\nconst Root = styled.div<IRoot>`\n  opacity: ${({ active }) => (active ? 1 : 0.3)};\n`;\n\nconst Message = styled.p`\n  margin: auto 20px;\n`;\n\nconst AppBottom: FC = () => {\n  const { gameFieldData, score = 0 } = useSelector(({ app }: TRootState) => app);\n  const isAuthorised = useSelector(({ auth }: TRootState) => !!auth.userProfile);\n\n  const getCurrentPercent = () => {\n    const countFilled = gameFieldData.filter((value: number) => !!value).length;\n    const countAll = gameFieldData.length;\n    return ((countFilled / countAll) * 100).toFixed(2);\n  };\n\n  return (\n    <Root active={isAuthorised}>\n      <Panel role=\"bottomPanel\">\n        <Message role=\"messageResult\">{`Результат: ${score}`}</Message>\n        <Message role=\"messagePercentFilled\">{`Процент заполнения: ${getCurrentPercent()}`}</Message>\n      </Panel>\n    </Root>\n  );\n};\n\nexport default memo(AppBottom);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from '@emotion/styled';\nimport { keyframes } from '@emotion/react';\n\nimport { CELL_SIZE } from '@src/modules/Cell/constatnts';\nimport { actions } from '@src/App/appSlice';\nimport { ICellsProps } from '@src/App/model/ICellsProps';\n\nconst bounce = keyframes`\n  from, 20%, 53%, 80%, to {\n    transform: translate3d(0,0,0);\n  }\n\n  40%, 43% {\n    transform: translate3d(0, -15px, 0);\n  }\n\n  70% {\n    transform: translate3d(0, -10px, 0);\n  }\n\n  90% {\n    transform: translate3d(0, -5px,0);\n  }\n`;\n\nconst color: ICellsProps = {\n  1: '#ff0000',\n  2: '#ffff00',\n  3: '#00ff00',\n};\nconst getColor = (id: number, opacity = ''): string => `${color[id]}${opacity ? opacity : ''}`;\n\ninterface IContainer {\n  isRight?: boolean;\n  isLeft?: boolean;\n  isBottom?: boolean;\n}\nconst Container = styled.div<IContainer>`\n  display: block;\n  width: ${({ isRight }) => CELL_SIZE - (isRight ? 2 : 1)}px;\n  height: ${({ isBottom }) => CELL_SIZE - (isBottom ? 2 : 1)}px;\n  text-align: center;\n  border-top: 1px solid #ddd;\n  border-left: 1px solid #ddd;\n  border-right: ${({ isRight }) => `1px solid ${isRight ? '#ddd' : ''};`}\n  border-bottom: ${({ isBottom }) => `1px solid ${isBottom ? '#ddd' : ''};`}\n  float: left;\n  ${({ isLeft }) => (isLeft ? 'clear: both;' : '')}\n  transition-property: background;\n  transition-duration: 0.3s;\n  transition-timing-function: ease-out;\n  background: #555;\n  background: #d1d1d1;\n  border: 0.6vh solid transparent;\n  border-color: white #9e9e9e #9e9e9e white;  \n`;\n\ninterface IContent {\n  selected?: boolean;\n  highlighted?: string;\n  filled: number;\n}\nconst Content = styled.div<IContent>`\n  cursor: pointer;\n  background: #ffff00;\n  border-radius: 50%;\n  background: ${({ selected, highlighted, filled }) =>\n    highlighted ? highlighted : selected ? getColor(filled) : getColor(filled, 'a0')};\n  border-radius: 50%;\n  width: 25px;\n  height: 25px;\n  margin: 10px;\n  border: 0.2vh solid transparent;\n  border-color: ${({ selected }) => (selected ? '#555' : '#9e9e9e')};\n\n  animation: ${({ selected }) => (selected ? bounce : '')} 1s ease infinite;\n\n  ${({ highlighted, filled }) => (!highlighted ? `:hover {background: ${getColor(filled)};}` : '')}\n`;\n\nexport interface CellProps {\n  num: number;\n  filled: number;\n  isSelected: boolean;\n  isLeft?: boolean;\n  isRight?: boolean;\n  isBottom?: boolean;\n  highlighted?: string;\n}\n\nconst Cell: React.FC<CellProps> = ({\n  num,\n  filled = 0,\n  isSelected = false,\n  isLeft = true,\n  isRight = true,\n  highlighted = '',\n}) => {\n  const dispatch = useDispatch();\n\n  const handleSelectCell = (event: React.MouseEvent<HTMLDivElement>) => {\n    event.stopPropagation();\n    if (!highlighted) {\n      dispatch(actions.setSelectedCell(!isSelected ? num : undefined));\n    }\n  };\n\n  const handleSelectContainer = (event: React.MouseEvent<HTMLDivElement>) => {\n    event.stopPropagation();\n    if (!isSelected && !highlighted) {\n      dispatch(actions.startGameSteps(num));\n    }\n  };\n\n  return (\n    <Container\n      role={`cellContainer-${num}`}\n      isRight={isRight}\n      isLeft={isLeft}\n      onClick={handleSelectContainer}\n    >\n      {filled > 0 && (\n        <Content\n          role={`cellContent-${num}`}\n          selected={isSelected}\n          onClick={handleSelectCell}\n          highlighted={highlighted}\n          filled={filled}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default Cell;\n","export const CELL_SIZE = 50;\n","import React, { FC } from 'react';\nimport styled from '@emotion/styled';\n\nimport { ICellInfo } from '@src/modules/Cell/models';\nimport Cell from '@src/modules/Cell';\nimport { TRootState } from '@src/store';\nimport { useSelector } from 'react-redux';\nimport { GAME_FIELD_SIZE } from '@src/App/initialState';\n\ninterface IFieldContainer {\n  active?: boolean;\n}\nexport const FieldContainer = styled.section<IFieldContainer>`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  margin: auto;\n  height: fit-content;\n  width: fit-content;\n  opacity: ${({ active }) => (active ? 1 : 0.3)};\n`;\n\nconst MessageNoData = styled.p`\n  height: 80vh;\n  position: relative;\n  text-align: center;\n`;\n\nconst GameField: FC = () => {\n  const userIsLogged = useSelector(({ auth }: TRootState) => !!auth.userProfile);\n  const {\n    gameFieldData,\n    selectedCell,\n    highlightedCells = {},\n  } = useSelector(({ app }: TRootState) => app);\n  const widthMinus1 = GAME_FIELD_SIZE - 1;\n  const heightMinus1 = Math.floor(gameFieldData.length / GAME_FIELD_SIZE) - 1;\n\n  if (!gameFieldData.length) {\n    return <MessageNoData role=\"noDataMessage\">Нет данных!</MessageNoData>;\n  }\n\n  return (\n    <FieldContainer role=\"cellsGrid\" active={userIsLogged}>\n      {gameFieldData.map((item: ICellInfo, index: number) => {\n        const y = Math.floor(index / GAME_FIELD_SIZE);\n        const x = index % GAME_FIELD_SIZE;\n        const isRight = x === widthMinus1;\n        const isBottom = y === heightMinus1;\n        const isLeft = x === 0;\n        return (\n          <Cell\n            key={`${y}-${x}`}\n            num={index}\n            filled={item}\n            isSelected={selectedCell === index}\n            isLeft={isLeft}\n            isRight={isRight}\n            isBottom={isBottom}\n            highlighted={highlightedCells[index]}\n          />\n        );\n      })}\n      <div style={{ clear: 'both' }} />\n    </FieldContainer>\n  );\n};\n\nexport default GameField;\n","import React, { FC } from 'react';\nimport styled from '@emotion/styled';\nimport GameField from '@src/modules/GameField';\n\nconst Root = styled.div`\n  height: 80vh;\n  position: relative;\n`;\n\nconst AppBody: FC = () => {\n  return (\n    <Root role=\"gamePanel\">\n      <GameField />\n    </Root>\n  );\n};\n\nexport default AppBody;\n","import React, { FC } from 'react';\nimport styled from '@emotion/styled';\nimport { Global, css } from '@emotion/core';\n\nimport AppHeader from '@src/App/AppHeader';\nimport AppBottom from '@src/App/AppBottom';\nimport AppBody from '@src/App/AppBody';\n\nconst Root = styled.div`\n  overflow: hidden;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu',\n    'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n`;\n\nconst appGlobal = css`\n  body {\n    background: #282c34;\n    color: white;\n    margin: 0;\n    padding: 0;\n    min-height: '100vh';\n    max-width: '100vw';\n  }\n`;\n\ninterface IUser {\n  body: string;\n  id: number;\n  title: string;\n  userId: number;\n}\n\nexport type IUserList = Array<IUser>;\n\nconst App: FC = () => (\n  <Root role=\"rootApp\">\n    <Global styles={appGlobal} />\n    <AppHeader />\n    <AppBody />\n    <AppBottom />\n  </Root>\n);\n\nexport default App;\n","import React, { StrictMode } from 'react';\nimport { Provider } from 'react-redux';\n\nimport { store } from '@src/store';\nimport App from '@src/App';\n\nconst Root = () => {\n  return (\n    <StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </StrictMode>\n  );\n};\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from '@src/Root';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"names":["size","Object","keys","Array","map","v","parseInt","array","rez","i","length","j","Math","floor","random","temp","countFilledCells","randomArray","fillPercent","toFixed","generateCellsByCount","compose","generateCellsByPercent","shuffle","createIndexArrayBySize","GAME_LEVEL_SETTINGS","percent","chain","increase","userLevel","gameFieldPercentFilled","gameFieldData","createGameField","GAME_FIELD_SIZE","highlightedCells","undefined","score","selectedCell","isLoading","getFreeCells","cells","cell","ind","filter","pos","level","countCells","slice","chains","lineX","indexOf","filterChainByX","lineY","filterChainByY","push","getChainByInd","direction","idColor","lines","maxChainLen","curInd","getIndByPos","curIdColor","y","min","max","ceil","targetCell","getPosByInd","chainsV","order","getVerticalChain","chainsH","getHorizontalChain","filterChainsByInd","getChainsByInd","replace","c","crypto","getRandomValues","Uint8Array","toString","value","setCell","time","Promise","resolve","setTimeout","getOutdatedCells","reduce","acc","cur","getHighlightedCells","forEach","id","addNewCellsToGameField","gameData","num","Number","lee","gameField","from","to","self","dwf","SIZE","isArray","sqrt","validateOutbounds","x","validatePoints","p1","p2","createGrid","grid","begin","end","initLee","ax","ay","bx","by","dx","dy","px","py","len","stop","d","k","ix","iy","accum","curr","appSlice","createSlice","name","initialState","reducers","rehydrate","state","restoreGame","action","payload","setUserLevel","setSelectedCell","startGameSteps","updateGame","initApp","resetApp","waitOn","waitOff","actions","reducer","userProfile","authSlice","setUser","login","logout","rootReducer","app","auth","signIn","userInfo","reject","token","uuidv4","localStorage","setItem","LOCAL_STORAGE_AUTH_KEY","JSON","stringify","err","signOut","removeItem","watchSetUser","put","appActions","call","authActions","watchLogout","watchRehydrate","persistedAuth","getItem","parse","authSaga","takeEvery","persistedApp","LOCAL_STORAGE_APP_KEY","dataApp","getApp","watchPersist","select","showCell","props","moveToCell","moveTo","delay","watchStartGameSteps","route","step0","step1","outdatedChains","getOutdatedChains","step2","oldScore","removeOutdatedChains","step3","newCells","getNewCells","step4","step5","appSaga","type","sagaMiddleware","createSagaMiddleware","store","configureStore","middleware","getDefaultMiddleware","prepend","concat","logger","run","all","dispatch","styled","Root","useDispatch","setUserInfo","useState","password","handleChange","e","currentTarget","role","initialValues","onSubmit","htmlFor","placeholder","onChange","disabled","title","onClick","levelList","onSelect","selectedLevel","key","UserForm","useSelector","useEffect","event","memo","Title","Fullscreen","rotate","keyframes","Loading","loading","setLoading","document","getElementById","createPortal","navigate","useNavigate","children","location","useLocation","element","path","AppHeader","active","Message","AppBottom","isAuthorised","bounce","color","getColor","opacity","Container","isRight","isBottom","isLeft","Content","selected","highlighted","filled","isSelected","stopPropagation","FieldContainer","MessageNoData","userIsLogged","heightMinus1","item","index","style","clear","appGlobal","css","styles","StrictMode","ReactDOM"],"sourceRoot":""}